* Packages
** use-package
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
   #+END_SRC
** Try
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC
** which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config (which-key-mode))
   #+END_SRC
** org-bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config (add-hook 'org-mode-hook 'org-bullets-mode))
   #+END_SRC
** ace-window
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init (global-set-key [remap other-window] 'ace-window))
   #+END_SRC
** counsel
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t)
   #+END_SRC
** avy
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind ("M-s" . avy-goto-char))
   #+END_SRC
** swiper
   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :ensure t
       :config
       (progn
         (ivy-mode 1)
         (setq ivy-initial-inputs-alist nil)
         (setq ivy-use-virtual-buffers t)
         (setq enable-recursive-minibuffers t)
         (global-set-key "\C-s" 'swiper)
         (global-set-key (kbd "M-x") 'counsel-M-x)
         (global-set-key (kbd "C-x C-f") 'counsel-find-file)
         (global-set-key (kbd "C-c g") 'counsel-git)
         (global-set-key (kbd "C-c j") 'counsel-git-grep)
         (global-set-key (kbd "C-x l") 'counsel-locate)
         (global-set-key (kbd "M-y") 'counsel-yank-pop)))
   #+END_SRC
** beacon
   #+BEGIN_SRC emacs-lisp
     (use-package beacon
       :ensure t
       :config (beacon-mode 1))
   #+END_SRC
** expand-region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :bind ("C-=" . er/expand-region))
   #+END_SRC
** web-mode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :ensure t
       :config
       (progn
         (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
         (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
         (add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
         (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
         (setq web-mode-markup-indent-offset 2)
         (setq web-mode-css-indent-offset 2)
         (setq web-mode-code-indent-offset 4)))
   #+END_SRC
** emmet-mode
   #+BEGIN_SRC emacs-lisp
     (use-package emmet-mode
       :ensure t
       :config (add-hook 'web-mode-hook 'emmet-mode))
   #+END_SRC
** Auto-Complete
   #+BEGIN_SRC emacs-lisp
     (use-package auto-complete
       :ensure t
       :bind (:map ac-completing-map
                   ("C-n" . ac-next)
                   ("C-p" . ac-previous))
       :init
       (progn
         (ac-config-default)
         (global-auto-complete-mode t)
         (add-hook 'sql-mode-hook 'auto-complete-mode)
         ;; (add-hook 'prog-mode-hook 'auto-complete-mode)
         ;; (add-hook 'org-mode-hook 'auto-complete-mode)

         ))
   #+END_SRC
** fill-column-indicator
   #+BEGIN_SRC emacs-lisp
     (use-package fill-column-indicator
       :ensure t
       :config
       (progn
         (define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
         (global-fci-mode 1)
         (setq fci-rule-column 80)))
   #+END_SRC
** dired-subtree
   #+BEGIN_SRC emacs-lisp
     (use-package dired-subtree
       :ensure t
       :bind (:map dired-mode-map
                   ("<backtab>" . dired-subtree-cycle)
                   ("<tab>" . dired-subtree-toggle)))
   #+END_SRC
** markdown-mode
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :mode (("README\\.md\\'" . gfm-mode)
              ("\\.md\\'" . markdown-mode)
              ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))
   #+END_SRC
** buffer-move
   #+BEGIN_SRC emacs-lisp
     (use-package buffer-move
       :ensure t
       :config
       (progn
         (global-set-key (kbd "<C-S-up>")     'buf-move-up)
         (global-set-key (kbd "<C-S-down>")   'buf-move-down)
         (global-set-key (kbd "<C-S-left>")   'buf-move-left)
         (global-set-key (kbd "<C-S-right>")  'buf-move-right)))
   #+END_SRC
** undo-tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :init (global-undo-tree-mode 1))
   #+END_SRC
** zoom
   #+BEGIN_SRC emacs-lisp
     (use-package zoom
       :ensure t
       :config
       (progn
         (zoom-mode t)
         (custom-set-variables
          '(zoom-size '(81 . 0.75)))))
   #+END_SRC
** smartparens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :config
       (progn
         (smartparens-global-mode t)
         (show-smartparens-global-mode t)))
   #+END_SRC
** rainbow-mode
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :ensure t
       :config (rainbow-mode 1))
   #+END_SRC
** sudo-edit
   #+BEGIN_SRC emacs-lisp
     (use-package sudo-edit
       :ensure t
       :config
       (progn
         (sudo-edit-indicator-mode 1)
         (global-set-key (kbd "C-c C-r") 'sudo-edit)))
   #+END_SRC
** shell-pop
   #+BEGIN_SRC emacs-lisp
     (use-package shell-pop
       :ensure t
       :bind ("<f8>" . shell-pop)
       :config
       (progn
         (setq shell-pop-shell-type (quote ("ansi-term" "ansi-term" (lambda nil (ansi-term shell-pop-term-shell)))))
         (setq shell-pop-term-shell "/bin/zsh")
         ;; Need to do this manually or not picked up by `shell-pop'
         (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type)))
   #+END_SRC
** "My" fira-code-mode
   #+BEGIN_SRC emacs-lisp
     ;; Requires "fira code symbol font" installed (Code available in GitHub Fira Code)

     (add-to-list 'load-path "~/.emacs.d/fira-code-mode")
     (require 'fira-code-mode)
     (add-hook 'prog-mode-hook 'fira-code-mode)
   #+END_SRC
** Themes
*** moe-theme
    #+BEGIN_SRC emacs-lisp
      (use-package moe-theme
        :ensure t)
    #+END_SRC
*** darktooth-theme
    #+BEGIN_SRC emacs-lisp
      (use-package darktooth-theme
        :ensure t)
    #+END_SRC
*** cyberpunk-theme
    #+BEGIN_SRC emacs-lisp
      (use-package cyberpunk-theme
        :ensure t)
    #+END_SRC
*** tango-2-theme
    #+BEGIN_SRC emacs-lisp
      ;; (use-package tango-2-theme
      ;;   :ensure t)
    #+END_SRC
*** zenburn-theme
    #+BEGIN_SRC emacs-lisp
      (use-package zenburn-theme
        :ensure t)
    #+END_SRC
*** gotham-theme
    #+BEGIN_SRC emacs-lisp
      (use-package gotham-theme
        :ensure t)
    #+END_SRC
** Before load theme
   #+BEGIN_SRC emacs-lisp
     ;; This deactivates all themes before executes "load-theme"

     (defun disable-all-themes ()
       (dolist (i custom-enabled-themes)
         (disable-theme i)))

     (defadvice load-theme (before disable-themes-first activate)
       (disable-all-themes))
   #+END_SRC
** Select theme
   #+BEGIN_SRC emacs-lisp
     (load-theme 'gotham t)
     ;; (load-theme 'zenburn t)
     ;; (load-theme 'darktooth t)
   #+END_SRC
** rainbow-delimiters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :config
       (progn
         (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
         (add-hook 'org-mode-hook 'rainbow-delimiters-mode)
         (custom-set-faces
          '(rainbow-delimiters-depth-1-face ((t (:inherit default))))
          '(rainbow-delimiters-depth-2-face ((t (:inherit default))))
          '(rainbow-delimiters-depth-3-face ((t (:inherit default))))
          '(rainbow-delimiters-depth-4-face ((t (:inherit default))))
          '(rainbow-delimiters-depth-5-face ((t (:inherit default))))
          '(rainbow-delimiters-depth-6-face ((t (:inherit default))))
          '(rainbow-delimiters-depth-7-face ((t (:inherit default))))
          '(rainbow-delimiters-depth-8-face ((t (:inherit default))))
          '(rainbow-delimiters-depth-9-face ((t (:inherit default))))
          )))
   #+END_SRC
** powerline
   #+BEGIN_SRC emacs-lisp
     (use-package powerline
       :ensure t
       :config (powerline-center-theme))
   #+END_SRC
** disable-mouse
   #+BEGIN_SRC emacs-lisp
     (use-package disable-mouse
       :ensure t
       :config (global-disable-mouse-mode))
   #+END_SRC
** emacs-smart-hungry-delete
   #+BEGIN_SRC emacs-lisp
     (use-package smart-hungry-delete
       :ensure t
       :bind (("<backspace>" . smart-hungry-delete-backward-char)
              ("C-d" . smart-hungry-delete-forward-char))
       :defer nil ;; dont defer so we can add our functions to hooks
       :config (smart-hungry-delete-add-default-hooks))
   #+END_SRC
* My customs
** Set font
   #+BEGIN_SRC emacs-lisp
     (set-frame-font "Fira Code 11" nil t)
   #+END_SRC
** Hide toolbar
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
   #+END_SRC
** Hide menubar
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
   #+END_SRC
** Hide scrollbar
   #+BEGIN_SRC emacs-lisp
     (toggle-scroll-bar -1)
   #+END_SRC
** Avoid startup screen
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
   #+END_SRC
** Activate line numbers at the left
   #+BEGIN_SRC emacs-lisp
     ;; (global-linum-mode)
   #+END_SRC
** Activate column number in minibar
   #+BEGIN_SRC emacs-lisp
     (column-number-mode)
   #+END_SRC
** Ido

   No longer needed since swiper is installed (kept it just in case)

   #+BEGIN_SRC emacs-lisp
     ;;(setq indo-enable-flex-matching t)
     ;;(setq ido-everywhere t)
     ;;(ido-mode 1)
   #+END_SRC
** Better buffer list
   #+BEGIN_SRC emacs-lisp
     (defalias 'list-buffers 'ibuffer-other-window)
   #+END_SRC
** Detelete white spaces
   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC
** Dired
   #+BEGIN_SRC emacs-lisp
     (add-hook 'dired-mode-hook 'dired-hide-details-mode)
   #+END_SRC
** yes or not
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Compile/run programs
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x c") 'compile)
     ;; "C-u C-x c" will compile and change to comint mode
   #+END_SRC
** Preserve scroll position
   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 10000
           scroll-preserve-screen-position t)
   #+END_SRC
** Delete when marked
   #+BEGIN_SRC emacs-lisp
     (delete-selection-mode t)
   #+END_SRC
** Deactivate bell sound
   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC
** Binding for revert-buffer
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f5>") 'revert-buffer)
   #+END_SRC
** Change scratch buffer message
   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message ";; Lets code\n\n")
   #+END_SRC
** Backup files
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist `(("." . "~/.emacs.d/.saves"))
           backup-by-copying t
           delete-by-moving-to-trash t
           auto-save-default t
           auto-save-timeout 20
           version-control t
           delete-old-versions t
           kept-old-versions 3
           kept-new-versions 3)

     ;; No backup files
     ;; (setq make-backup-files nil)
   #+END_SRC
** Highlight for unix config files
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '(".*rc$" . conf-unix-mode))
     (add-to-list 'auto-mode-alist '(".*config$" . conf-unix-mode))
     (add-to-list 'auto-mode-alist '(".*cnf$" . conf-unix-mode))
   #+END_SRC
